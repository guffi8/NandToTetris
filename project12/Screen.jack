// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

	static int rows;
	static int columns;
	static int screen;
	static Array twoToThe;
	static boolean color; // true = black, false = white
	
    /** Initializes the Screen. */
    function void init() {
		
		var int i;
		var int powerOfTwo;
		
		let rows = 256;
		let columns = 512;
		let screen = 16384;
		let color = true;
		
		let i = 0;
		let powerOfTwo = 1;		
		let twoToThe = Array.new(16);
		while(i < 16) {
			let twoToThe[i] = powerOfTwo;
			let powerOfTwo = powerOfTwo + powerOfTwo;
			let i = i + 1;
		}
		
		return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
		
		var int i;
		let i = 0;
		
		while(i < 8192) { // number of words in the screen
			let screen[i] = 0;
			let i = i + 1; 
		}
		
		return;
    
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
		
		var int col;
		var int row;
		var int pix;
		var int bitToColor;
		var int temp;
		let col = Math.shiftLeft(x, 4);
		
		let row = Math.shiftRight(y, 5);	
		let pix = Memory.peek(screen + col + row);
		let bitToColor = x - (Math.shiftRight(col, 4));

	
		if(color) {		
			let pix = (pix | twoToThe[bitToColor]); 
		} else {		
			let temp = -1;
			let temp = temp - twoToThe[bitToColor];
			let pix = pix & temp; 
		}
		do Memory.poke(screen + row + col, pix);
		
		return;
    }
    

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int dx;
		var int dy;
		var int a, b;
		var int adyMinusbdx;
		var int advanceA;
		var int advanceB;
		
		let advanceA = 0;
		let advanceB = 0;
		
		let dx = (x2 - x1);
		let dy = (y2 - y1);
		
		if((dx = 0) & (dy = 0)) {
			//do Screen.drawPixel(x1, y1);
			return;
		}
		
		if(dx < 0) {
			let dx = Math.abs(dx);
			let advanceA = -1;
		} else {
			if(dx > 0) {
				let advanceA = 1;
			}
		} 
		
		if(dy < 0) {
			let dy = Math.abs(dy);
			let advanceB = -1;
		} else {
			if(dy > 0) {
				let advanceB = 1;
			}
		} 
		

		let adyMinusbdx = 0;
		let a = 0;
		let b = 0;
					
		while((~(Math.abs(a) > dx)) & (~(Math.abs(b) > dy))) {

			do Screen.drawPixel(x1 + a, y1 + b);
			if(adyMinusbdx < 0) {
				let a = a + advanceA;
				let adyMinusbdx = adyMinusbdx + dy;
			} else { 
				let b = b + advanceB;
				let adyMinusbdx = adyMinusbdx - dx;	
			}
			
		}
		
		return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		
		var int j;
		let j = y1;
		
		while(~(j > y2 )) {
			do Screen.drawLine(x1 ,j, x2, j);
			let j = j + 1;
		}

		return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
		
		var int dy;
		var int dx;
		var int rInPower;
	
		let dy = -r;
		let rInPower = Math.multiply(r, r);
		while(~(dy > r)) {
			let dx =  Math.sqrt(rInPower - Math.multiply(dy, dy));
			do Screen.drawLine(cx - dx, cy + dy, cx + dx, cy + dy);
			let dy = dy + 1;
		}
		
		return;	
    }
}
