// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
	
	static Array twoToThe;
	static int yq;
	
    /** Initializes the library. */
    function void init() {
		var int i;
		var int powerOfTwo;
		let i = 0;
		let powerOfTwo = 1;		
		let twoToThe = Array.new(16);
		while(i < 16) {
			let twoToThe[i] = powerOfTwo;
			let powerOfTwo = powerOfTwo + powerOfTwo;
			let i = i + 1;
		}
		return;
		
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x < 0) {
			return -x;
		} 
		return x;
    }

    /**  Returns true if the j bit of the integer x is 1 and false otherwise. */
	function int bit(int x, int j) {
		if((twoToThe[j] & x) = twoToThe[j]) {
			return true;
		}
		return false;
	}

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
		
		var int j;
		var int sum;
		var int shifthedY;
		let sum = 0;
		let shifthedY = y;
		let j = 0;
		while(j < 16) {
			if(Math.bit(x, j) = true) {
				let sum = sum + shifthedY;
			}
			let shifthedY = shifthedY + shifthedY;
			let j = j + 1;
		}
		
		return sum;
		
    }
    
	/** Returns the integer part of x/y. */
    function int recursiveDivide(int x, int y) {
		
		var int q;
		if((x < y) | (y < 0)) {
			let yq = 0;
			return 0;
		}
		let q = Math.recursiveDivide(x, y + y);
		if(Math.bit(q, 0) = true) { // if q is odd
			let yq = yq + y;
		}
		if((x - (yq + yq)) < y) {
			return (q + q);
		}
		return (q + q + 1);
		
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
		
		var int res;
		var boolean isYNeg;
		var boolean isXNeg;
		let isYNeg = false;
		let isXNeg = false;
		
		if(y < 0) {
			let isYNeg = true;
			let y = Math.abs(y);
		}
		if(x < 0) {
			let isXNeg = true;
			let x = Math.abs(x);
		}
		
		let res = Math.recursiveDivide(x,y);
		
		if(isYNeg) {
			let res = -res;
		}
		if(isXNeg) {
			let res = -res;
		}
		
		return res;
		
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		
		var int res;
		var int temp;
		var int power;
		var int j;
		let res = 0;
		let j = 7; // 16/2 -1
		
		while(~(j < 0)) {
			let temp = res + twoToThe[j];
			let power = Math.multiply(temp, temp);
			if((power > 0) & ~(power > x)) {
				let res = temp;
			}
			let j = j - 1;
		}
		
		return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    
		if(a < b) {
			return b;
		}
		return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	
    	if(a > b) {
			return b;
		}
		return a;
    }
    
    /** Shifting num to left c bits */
    function int shiftLeft(int num, int c) {
		var int res;
		var int i;
		
		let i = c;
		let res = 0;
		
		while(i < 16) {
			if(Math.bit(num, i)) {
				let res = res + twoToThe[i - c];
			}
			let i = i + 1;
		} 
		
		return res;
    }
    
    /** Shifting num to right c bits */
    function int shiftRight(int num, int c) {
		var int res;
		var int i;
		
		let i = 0;
		let res = 0;
		
		while((i + c) < 16) {
			if(Math.bit(num, i)) {
				let res = res + twoToThe[i + c];
			}
			let i = i + 1;
		} 
		
		return res;
    }
}
