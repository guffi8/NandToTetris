/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or 
* (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output 
* will be D*A/M (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will 
* behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    And(a = instruction[15], b = instruction[14], out = temp);
	
    ExtendAlu(x = outD, y = outMA, instruction[0..6] = instruction[6..12],
	instruction[7] = instruction[13], instruction[8] = temp, 
	out = outALU, out = outM, zr = zero, ng = negative);
	
    /* dealing with the loads and in's of the registers */
    Not(in = instruction[15], out = notInst15);
    Or(a = notInst15, b = instruction[5], out = loadA);
    And(a = instruction[15], b = instruction[4], out = loadD);
    And(a = instruction[15], b = instruction[3], out = writeM);
  
    DRegister(in = outALU, load = loadD, out = outD);
    ARegister(in = ARegIn, load = loadA, out[0..14] = addressM, out = outA);
    
    Not(in = instruction[15], out = ALUorAdrress);
    And(a = instruction[15], b = instruction[12], out = AorM);
    Mux16(a = outALU, b = instruction, sel = ALUorAdrress, out = ARegIn);
    Mux16(a = outA, b = inM, sel = AorM, out = outMA);
   
    /* dealing with the jump: */
    Not(in = zero, out = notZero);
    Not(in = negative, out = notNegative);
    And(a = notZero, b = notNegative, out = positive);
    And(a = instruction[0], b = positive, out = jumpG);
    And(a = instruction[1], b = zero, out = jumpE);
    And(a = instruction[2], b = negative, out = jumpL);

    Or(a = jumpG, b = jumpE, out = jumpTemp);
    Or(a = jumpTemp, b = jumpL, out = maybeJump);
    And(a = instruction[15], b = maybeJump, out = JMP);

    PC(in = outA, load = JMP, inc = true, reset = reset, out[0..14] = pc);
}
