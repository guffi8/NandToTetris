/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/

CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:

     //	Create the regular ALU:
     ALU(x = x, y = y, zx = instruction[5], nx = instruction[4], 
     	zy = instruction[3], ny = instruction[2], f = instruction[1], 
	no = instruction[0], out = regALU, zr = zr1, ng = ng1);
     
     // Find out in needed to do x*y and do shifting:
     Mul(a = x, b = y, out = xMultY);
     ShiftRight(in = x, out = xShiftRight); 
     ShiftRight(in = y, out = yShiftRight);    
     ShiftLeft(in = x, out = xShiftLeft);
     ShiftLeft(in = y, out = yShiftLeft);

     Mux16(a = yShiftRight, b = xShiftRight, sel = instruction[4], 
     	out = xOryShiftRight);
     Mux16(a = yShiftLeft, b = xShiftLeft, sel = instruction[4], 
     	out = xOryShiftLeft);
     Mux16(a = xOryShiftRight, b = xOryShiftLeft, sel = instruction[5], 
     	out = xOryAfterShift);

     // Get the correct output and dealing the ng:
     Mux4Way16(a = xMultY, b = xOryAfterShift, c = xMultY, d = regALU, 
     	sel = instruction[7..8], out = out, out[15] = ng, 
	out[0..7] = tempLow, out[8..15] = tempHigh);
     
     // Dealing the zr:
     Or8Way(in = tempLow, out = a);
     Or8Way(in = tempHigh, out = b);
     Or(a = a, b = b, out = AorB);
     Mux(a = true, b = false, sel = AorB, out = zr);
      
}
