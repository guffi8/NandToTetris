/**
 * Implements the Snake game.
 * In this game you need to avoid of the screen borders by moving
 * the snake with the keyboard arrows. Press 'q' to exit the game.
 */
class SnakeGame {
	
	/** The snake */
	field Snake snake;

	/** The length of the snake */
	field int length;

	/** The length of the snake */
	field int width;

	field int gamesNum;

	/** Constructs a new Snake Game. */
	constructor SnakeGame new() {

		do printTitle();
		do Output.moveCursor(11,15);
		let length = Keyboard.readInt("Choose the length of the snake:");
		do Output.moveCursor(12,15);
		let width = Keyboard.readInt("Choose the width of the snake:");

		let snake = Snake.new(length, width);
		let gamesNum = 0;

		return this;
	}

	/** Print the game title. */
	method void printTitle() {
		// S
		do Screen.drawRectangle(40, 20, 100, 30);
		do Screen.drawRectangle(40, 20, 50, 55);
		do Screen.drawRectangle(40, 45, 100, 55);
		do Screen.drawRectangle(90, 45, 100, 80);
		do Screen.drawRectangle(40, 70, 100, 80);
		do Sys.wait(300);

		// N
		do Screen.drawRectangle(110, 20, 120, 80);
		do Screen.drawRectangle(110, 20, 120, 30);
		do Screen.drawRectangle(120, 30, 130, 40);
		do Screen.drawRectangle(130, 40, 140, 50);
		do Screen.drawRectangle(140, 50, 150, 60);
		do Screen.drawRectangle(150, 60, 160, 70);
		do Screen.drawRectangle(160, 70, 170, 80);
		do Screen.drawRectangle(160, 20, 170, 80);
		do Sys.wait(300);

		// A
		do Screen.drawRectangle(180, 70, 190, 80);
		do Screen.drawRectangle(185, 60, 195, 70);
		do Screen.drawRectangle(190, 50, 200, 60);
		do Screen.drawRectangle(195, 40, 205, 50);
		do Screen.drawRectangle(200, 30, 210, 40);
		do Screen.drawRectangle(205, 20, 215, 30);
		do Screen.drawRectangle(190, 50, 230, 60);
		do Screen.drawRectangle(230, 70, 240, 80);
		do Screen.drawRectangle(225, 60, 235, 70);
		do Screen.drawRectangle(220, 50, 230, 60);
		do Screen.drawRectangle(215, 40, 225, 50);
		do Screen.drawRectangle(210, 30, 220, 40);
		do Sys.wait(300);

		// K
		do Screen.drawRectangle(250, 20, 260, 80);
		do Screen.drawRectangle(255, 45, 265, 55);
		do Screen.drawRectangle(265, 35, 275, 45);
		do Screen.drawRectangle(265, 55, 275, 65);
		do Screen.drawRectangle(275, 25, 285, 35);
		do Screen.drawRectangle(275, 65, 285, 75);
		do Screen.drawRectangle(285, 20, 295, 30);
		do Screen.drawRectangle(285, 70, 295, 80);
		do Sys.wait(300);

		// E
		do Screen.drawRectangle(310, 20, 320, 80);
		do Screen.drawRectangle(310, 20, 370, 30);
		do Screen.drawRectangle(310, 45, 370, 55);
		do Screen.drawRectangle(310, 70, 370, 80);
		do Sys.wait(300);

		// ! ! !
		do Screen.drawRectangle(390, 15, 400, 70);
		do Screen.drawRectangle(390, 75, 400, 85);
		do Sys.wait(150);

		do Screen.drawRectangle(410, 15, 420, 70);
		do Screen.drawRectangle(410, 75, 420, 85);
		do Sys.wait(150);

		do Screen.drawRectangle(430, 15, 440, 70);
		do Screen.drawRectangle(430, 75, 440, 85);
		do Sys.wait(750);

		return;
	}

	/** Print the enter screen masssge. */
	method void enterScreen() {

		do Screen.clearScreen();
		do Output.moveCursor(11,27);
		do Output.printString("Get Ready ...");

		do Sys.wait(750);

		do Screen.clearScreen();
		do Output.moveCursor(11,29);
		do Output.printString("Set ...");

		do Sys.wait(750);

		do Screen.clearScreen();
		do Output.moveCursor(11,29);
		do Output.printString("GO !!!");

		do Sys.wait(750);
		do Screen.clearScreen();

		return;
	}

	/** 
	 * Starts the game. Handles inputs from the user that control
     * the snake's movement. 
     */
	method void run() {
		var char key;
		var boolean exit;
		var boolean continue;
		var int direction;

		let continue = true;
		let exit = false;
		let direction = 0;

		do enterScreen();

		while(~exit) {

			// waits for a key to be pressed.
			while(key = 0) {
                let key = Keyboard.keyPressed();
                let continue = snake.updateSnake(direction);
                if(~continue) {
                	do gameOver();
                	return;
                }
            }

            if(key = 81) {
            	let gamesNum = gamesNum + 1;
            	let exit = true;
            }

			// move right
			if(key = 132) {
				if(~(direction = 2)) {
					let direction = 0;
				}
			}

			// move down
			if(key = 133) {
				if(~(direction = 3)) {
					let direction = 1;
				}
			}

			// move left
			if(key = 130) {
				if(~(direction = 0)) {
					let direction = 2;
				}
			}

			// move up
			if(key = 131) {
				if(~(direction = 1)) {
					let direction = 3;
				}
			}

			// waits for the key to be released.
			while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                let continue = snake.updateSnake(direction);
                if(~continue) {
                	do gameOver();
                	return;
                }
            }

		}

		do printEndGame();

		return;
	}

	/** Print a massege of ending the game. */
	method void printEndGame() {

		do Screen.clearScreen();
		do Output.moveCursor(11,24);
		do Output.printString("You played ");
		do Output.printInt(gamesNum);
		do Output.printString(" Games.");
		do Sys.wait(500);
		do Output.moveCursor(13,23);
		do Output.printString("Thank You! Bye Bye ...");

		return;
	}

	/** Print game over massege. */
	method void gameOver() {
		var char key;

		let gamesNum = gamesNum + 1;

		do Screen.clearScreen();
		do Output.moveCursor(10,27);
		do Output.printString("Game Over !!!");
		do Sys.wait(500);
		do Output.moveCursor(12,27);
		do Output.printString("Another Game?");
		do Output.moveCursor(13,25);
		do Output.printString("(y - yes, n - no)");

		while(true) {
			let key = Keyboard.keyPressed();
			if(key = 89) { // yes
				do snake.initSnake();
				do run();
				return;
			}
			if(key = 78) { // no
				do printEndGame();
				return;
			}
		}

		return;
	}

	/** Deallocates the object's memory. */
	method void dispose() {

		do snake.disposeSnake();
		do Memory.deAlloc(this);

		return;
	}

}
