/**
 * Implements a graphic snake. A graphic snake has a length and width.
 * It also has methods for drawing and moving on the screen.
 */
class Snake {

	// The x's coordinates of the snake.
	field Array snakeX;

	// The y's coordinates of the snake.
	field Array snakeY;

	// The length of the snake.
	field int length;

	// The width of the snake.
	field int width;

	// true if the game should continue.
	field boolean continue;  

	/** Constructs a new snake with a given length and width. */
	constructor Snake new(int snakeLength, int snakeWidth) {
		var int i;

		let length = snakeLength;
		let snakeX = Array.new(length);
		let snakeY = Array.new(length);
		let width = snakeWidth;

		do initSnake();

		return this;
	}

	/** Placed the snake in the start point */
	method void initSnake() {
		var int i;

		let continue = true;
		let i = 0;
		while(i < length) {
			let snakeX[i] = width + (i*width*2);
			let snakeY[i] = 128;
			let i = i + 1;
		}

		return;
	}

	/** Draws the snake on the screen. */
	method void drawSnake() {
		var int i;

		let i = 0;
		while(i < length) {
			do Screen.drawCircle(snakeX[i], snakeY[i], width);
			let i = i + 1;
		}

		return;
	}

	/**
	 * Move the snake to given direction.
	 *
 	 * direction == 0 ==> right
 	 * direction == 1 ==> down
 	 * direction == 2 ==> left
 	 * direction == 3 ==> up
 	 *
 	 */
	method boolean updateSnake(int direction) {
		
		var int i;
		var boolean selfClash;
		let i = 0;

		if(continue) {
			while(i < (length - 1)) {
				let snakeX[i] = snakeX[i+1];
				let snakeY[i] = snakeY[i+1];
				let i = i + 1;
			}

			let i = length - 1;				
			if(direction = 0) {
				let snakeX[i] = snakeX[i - 1] + (width*2);
				let snakeY[i] = snakeY[i - 1];
				
				// check if the snake is still in the screen.
				if((snakeX[i] + width) > (511)) {
					let continue = false;
					return false;
				}
				
			}
			if(direction = 1) {
				let snakeX[i] = snakeX[i - 1];
				let snakeY[i] = snakeY[i - 1] + (width*2);

				// check if the snake is still in the screen.
				if((snakeY[i] + width) > (256)) {
					let continue = false;
					return false;
				}
			}
			if(direction = 2) {
				let snakeX[i] = snakeX[i - 1] - (width*2);
				let snakeY[i] = snakeY[i - 1];

				// check if the snake is still in the screen.
				if((snakeX[i] - width) < (0)) {
					let continue = false;
					return false;
				}
			}
			if(direction = 3) {
				let snakeX[i] = snakeX[i - 1];
				let snakeY[i] = snakeY[i - 1] - (width*2);

				// check if the snake is still in the screen.
				if((snakeY[i] - width) < (0)) {
					let continue = false;
					return false;
				}
			}
		}

		// check if the snake clash it's self
		let selfClash = checkSelfClash();
		if(~selfClash) {
			let continue = false;
			return false;
		}

		do Screen.clearScreen();
		do drawSnake();
		
		do Sys.wait(100 - length);

		return true;

	}

	/** Check if the snake clash it's self */
	method boolean checkSelfClash() {
		var int i;

		let i = 0;
		while(i < (length - 1)) {
			if(snakeX[i] = snakeX[length - 1]) {
				if(snakeY[i] = snakeY[length - 1]) {
					return false;
				} 
			}

			let i = i + 1;
		}

		return true;

	}

	/** Deallocates the object's memory. */
	method void disposeSnake() {
		do snakeX.dispose();
		do snakeY.dispose();
		do Memory.deAlloc(this);
		return;
	}
}
